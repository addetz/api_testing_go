// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repo

import (
	"github.com/go_apps_101/models"
	"sync"
)

var (
	lockDBMockDeleteOrder   sync.RWMutex
	lockDBMockFindAllOrders sync.RWMutex
	lockDBMockFindOrder     sync.RWMutex
	lockDBMockUpsertOrder   sync.RWMutex
)

// Ensure, that DBMock does implement DB.
// If this is not the case, regenerate this file with moq.
var _ DB = &DBMock{}

// DBMock is a mock implementation of DB.
//
//     func TestSomethingThatUsesDB(t *testing.T) {
//
//         // make and configure a mocked DB
//         mockedDB := &DBMock{
//             DeleteOrderFunc: func(id string) error {
// 	               panic("mock out the DeleteOrder method")
//             },
//             FindAllOrdersFunc: func() []models.Order {
// 	               panic("mock out the FindAllOrders method")
//             },
//             FindOrderFunc: func(id string) (models.Order, error) {
// 	               panic("mock out the FindOrder method")
//             },
//             UpsertOrderFunc: func(o models.Order) error {
// 	               panic("mock out the UpsertOrder method")
//             },
//         }
//
//         // use mockedDB in code that requires DB
//         // and then make assertions.
//
//     }
type DBMock struct {
	// DeleteOrderFunc mocks the DeleteOrder method.
	DeleteOrderFunc func(id string) error

	// FindAllOrdersFunc mocks the FindAllOrders method.
	FindAllOrdersFunc func() []models.Order

	// FindOrderFunc mocks the FindOrder method.
	FindOrderFunc func(id string) (models.Order, error)

	// UpsertOrderFunc mocks the UpsertOrder method.
	UpsertOrderFunc func(o models.Order) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteOrder holds details about calls to the DeleteOrder method.
		DeleteOrder []struct {
			// ID is the id argument value.
			ID string
		}
		// FindAllOrders holds details about calls to the FindAllOrders method.
		FindAllOrders []struct {
		}
		// FindOrder holds details about calls to the FindOrder method.
		FindOrder []struct {
			// ID is the id argument value.
			ID string
		}
		// UpsertOrder holds details about calls to the UpsertOrder method.
		UpsertOrder []struct {
			// O is the o argument value.
			O models.Order
		}
	}
}

// DeleteOrder calls DeleteOrderFunc.
func (mock *DBMock) DeleteOrder(id string) error {
	if mock.DeleteOrderFunc == nil {
		panic("DBMock.DeleteOrderFunc: method is nil but DB.DeleteOrder was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockDBMockDeleteOrder.Lock()
	mock.calls.DeleteOrder = append(mock.calls.DeleteOrder, callInfo)
	lockDBMockDeleteOrder.Unlock()
	return mock.DeleteOrderFunc(id)
}

// DeleteOrderCalls gets all the calls that were made to DeleteOrder.
// Check the length with:
//     len(mockedDB.DeleteOrderCalls())
func (mock *DBMock) DeleteOrderCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockDBMockDeleteOrder.RLock()
	calls = mock.calls.DeleteOrder
	lockDBMockDeleteOrder.RUnlock()
	return calls
}

// FindAllOrders calls FindAllOrdersFunc.
func (mock *DBMock) FindAllOrders() []models.Order {
	if mock.FindAllOrdersFunc == nil {
		panic("DBMock.FindAllOrdersFunc: method is nil but DB.FindAllOrders was just called")
	}
	callInfo := struct {
	}{}
	lockDBMockFindAllOrders.Lock()
	mock.calls.FindAllOrders = append(mock.calls.FindAllOrders, callInfo)
	lockDBMockFindAllOrders.Unlock()
	return mock.FindAllOrdersFunc()
}

// FindAllOrdersCalls gets all the calls that were made to FindAllOrders.
// Check the length with:
//     len(mockedDB.FindAllOrdersCalls())
func (mock *DBMock) FindAllOrdersCalls() []struct {
} {
	var calls []struct {
	}
	lockDBMockFindAllOrders.RLock()
	calls = mock.calls.FindAllOrders
	lockDBMockFindAllOrders.RUnlock()
	return calls
}

// FindOrder calls FindOrderFunc.
func (mock *DBMock) FindOrder(id string) (models.Order, error) {
	if mock.FindOrderFunc == nil {
		panic("DBMock.FindOrderFunc: method is nil but DB.FindOrder was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockDBMockFindOrder.Lock()
	mock.calls.FindOrder = append(mock.calls.FindOrder, callInfo)
	lockDBMockFindOrder.Unlock()
	return mock.FindOrderFunc(id)
}

// FindOrderCalls gets all the calls that were made to FindOrder.
// Check the length with:
//     len(mockedDB.FindOrderCalls())
func (mock *DBMock) FindOrderCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockDBMockFindOrder.RLock()
	calls = mock.calls.FindOrder
	lockDBMockFindOrder.RUnlock()
	return calls
}

// UpsertOrder calls UpsertOrderFunc.
func (mock *DBMock) UpsertOrder(o models.Order) error {
	if mock.UpsertOrderFunc == nil {
		panic("DBMock.UpsertOrderFunc: method is nil but DB.UpsertOrder was just called")
	}
	callInfo := struct {
		O models.Order
	}{
		O: o,
	}
	lockDBMockUpsertOrder.Lock()
	mock.calls.UpsertOrder = append(mock.calls.UpsertOrder, callInfo)
	lockDBMockUpsertOrder.Unlock()
	return mock.UpsertOrderFunc(o)
}

// UpsertOrderCalls gets all the calls that were made to UpsertOrder.
// Check the length with:
//     len(mockedDB.UpsertOrderCalls())
func (mock *DBMock) UpsertOrderCalls() []struct {
	O models.Order
} {
	var calls []struct {
		O models.Order
	}
	lockDBMockUpsertOrder.RLock()
	calls = mock.calls.UpsertOrder
	lockDBMockUpsertOrder.RUnlock()
	return calls
}
